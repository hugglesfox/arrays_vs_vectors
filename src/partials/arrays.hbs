{{> components/header title="Arrays" pretitle="Act I" subtitle="aka Static Arrays" }}

{{#> components/section }}
{{#> components/content title="The humble array." }}
<p class="block">
  Dynamically creating variables isn't a thing in a lot of programming languages but, you still want a nice way of storing lots of items? Arrays sound like the data type for you!
</p>
<p class="block">
  Arrays are primitive data types which allows one to store multiple values of the same type using a single variable.
</p>
{{/components/content}}
{{#> components/aside }}
<pre>
  <code class="cpp">
    int numbers[] = {0, 1, 1, 3, 4};
  </code>
</pre>
{{/components/aside}}
{{/components/section}}

{{#> components/section centered=true}}
{{#> components/content title="Wait how does it do that?" }}
<p>
  To be able to store multiple items, we need to be able to keep track of multiple locations in memory right? And you would be right.
</p>
{{/components/content}}
{{/components/section}}

{{#> components/section }}
{{#> components/content title="Static typing to the rescue!"}}
<p>
  In order to solve this we can use the fact that all types in C++ have a known size at compile time in order to work out where each element is stored from a starting address by just multiplying the length of each element by a number to give you a memory offset. So 0 would get our first item, 1 the second and so on...
</p>
{{/components/content}}
{{#> components/aside }}
<pre>
  <code class="plaintext">
    <i>item</i> = <i>num</i> * <i>item_length</i> + <i>array_start</i>
  </code>
</pre>
{{/components/aside}}
{{/components/section}}

{{#> components/section }}
{{#> components/content title="Putting it together." }}
<p>
  The same formula can be used for allocating a block of memory for an array. We can multiply the amount of items in the array with the size of each element to work out the over all size of the array. This means the size of an array must be known at compile time.
</p>
{{/components/content}}
{{#> components/aside }}
<pre>
  <code class="plaintext">
    <i>array_length</i> = <i>item_count</i> * <i>item_length</i>
  </code>
</pre>
{{/components/aside}}
{{/components/section}}

{{#> components/section dark=true }}
{{#> components/content title="The subscript operator." }}
<p class="block">
  Getting an element from an array or vector by using a number is so common in programming it has it's own name, the index. So the first item in an array is said to have the index of 0. In many languages we can use what's known as the subscript operator to get an element of a certain index as shown.
</p>
<p class="block">
  The same syntax can be used along with the assignment operator to assign values to indexes in the array.
</p>
{{/components/content}}
{{#> components/aside }}
<pre>
  <code class="cpp">
    numbers[0];  // Indexes the 0th item
    numbers[0] = 42;  // Assigns the 0th item to 42
  </code>
</pre>
{{/components/aside}}
{{/components/section}}

{{#> components/section centered=true }}
{{#> components/content title="So why do dynamic arrays exist?"}}
<p class="block">
  Alright we can store lots of data, we just need to know the size of everything at compile time! Well done everyone lets all go home and congratulate ourselves for a job well done.
</p>

<blockquote class="block">
  <p>
    "But wait!"
  </p>
</blockquote>

<p class="block">
  I here you say; What if we don't know how many elements the array is going to store? Like um... What if we were reading a CSV file or asking for user input? There's no way to know how big the CSV file is or how many items the user will input at compile time!?
</p>

<p class="block">
  <a href="https://youtu.be/wf-BqAjZb8M?t=1383">
    <em>*Thumps table*</em> <br>
    There must be a better way!
  </a>
</p>
{{/components/content}}
{{/components/section}}
